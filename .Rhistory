?read.csv
read.csv(path2csv, stringsAsFactors = FALSE)
storage.mode()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
select(cran)
select(cran, r_arch:country)
info()
play()
nxt()
select(all)
select(path2csv)
select(mydf)
select(cran, r_arch:country)
cran
select(crean, -time)
select(cran, -time)
-5:20
-(5:20)
select(X:size)
select(X:size)
-select(X:size)
select-(x:size)
select(-X:-size)
select(cran, -X:-size)
select(cran, -(X:size))
filter(cran, pakags == "swirl")
Filter(Cran, apkage = "swirl")
Filter(cran, apkage = "swirl")
Filter(cran, pakage = "swirl")
Filter(cran, pakages = "swirl")
Filter(cran, pakages =+ "swirl")
Filter(cran, pakages == "swirl")
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
"IN" (India)
filter("IN" (India))
filter(cran, r_Version == "3.0.1", country == "India")
filter(cran, r_version == "3.0.1", country == "India")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 | r_os == "linux=gnu")
filter(cran, size > 100500,  r_os == "linux=gnu")
filter(cran, size > 100500, r_os == "linux=gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
bye()
swirl()
swirl()
library(swirl
)
swirl()
is.na(c(3, 5,, NA, 10))
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, r_version == !is.na(r_version))
filter(cran, !is.na(r_version))
cran2 <- select(cran, ip_id == size)
cran2 <- select(cran, ip_id == "size")
cran2 <- select(cran, ip_id)
select(cran, size:ip_id)
cran2 <- select(cran, size:ip_dp)
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
desc(ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(crean3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^10)
mutate(cran3, size_gb = size_mb / 2^20)
mutate(cran3, size_gb = size_mb / 2^20)
mutate(cran3, size_gb = size_mb / 2^10)
cran3$size_mb <- cran$size / 2^20
mutate(cran3, size_mb = size / 2^20, size_gb = sizemb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
label <- summarize(cran, avg_bytes = mean(size))
summarize(cran, avg_bytes = mean(size))
bye()
ucscDb <- dbConnect(MySQL(), user="genom",)
ucscDb <- dbConnect(MySQL(), user = "genome",
host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb, "show databases;"); dbDisconnect(ucscDb);
istall.pakages("RMySQL")
install.pakages("RMySQL")
install.packages("RMySQL")
ucscDb <- dbConnect(MySQL(), user = "genome",
host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb, "show databases;"); dbDisconnect(ucscDb);
mysql --user=genome --host=genome-mysql.cse.ucsc.edu -A
ucscDb <- dbConnect(MySQL(), user = "genome",
host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb, "show databases;"); dbDisconnect(ucscDb);
dbConnect(MySQL(), user = "genome",
host="genome-mysql.cse.ucsc.edu")
MySQL()
ucscDb <- dbConnect(MySQL(), user = "genome",
host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb, "show databases;"); dbDisconnect(ucscDb);
install.packages("RMySQL")
ucscDb <- dbConnect(MySQL(), user = "genome",
host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb, "show databases;"); dbDisconnect(ucscDb);
MySQL()
mysql.server
{start|stop|restart|reload|force-reload|status} [MySQL server options]
mysql.server
{start|stop|restart|reload|force-reload|status} [MySQL server options]
/usr/local/mysql/support-files/mysql.server
Usage: mysql.server  {start|stop|restart|reload|force-reload|status}  [ MySQL server options ]
sudo /usr/local/mysql/support-files/mysql.server start
library(RMySQL)
ucscDb <- dbConnect(MySQL(), user = "genome",
host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb, "show databases;"); dbDisconnect(ucscDb);
result
hg19 <-dbConnect(MySQL(), user="genome", db="hg19",
host="genome-mysql.cse.ucsc.edu")
allTable <- dbListTables(hg19)
length(allTables)
hg19 <-dbConnect(MySQL(), user="genome", db="hg19",
host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19, "affyU133Plus2")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19, "affyU133Plus")
affyData <- dbReadTable(hg19, "affyU133Plus2")
affyData <- dbReadTable(hg19, "affyU133Plus2")
affyData <- dbReadTable(hg19, "affyU133Plus2")
head(affyData)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created = h5reateFile("example.h5")
created
created = h5createFile("example.h5")
created
created = h5createGroup("example.h5", "foo")
created = h5createGroup("example.h5", "baa")
created = h5createGroup("example.5", "foo/foobaa")
h51s("example.h5")
created = h5createGroup("example.h5", "foo")
created = h5createGroup("example.h5", "baa")
created = h5createGroup("example.h5", "foo/foobaa")
h51s("example.h5")
created = h5createGroup("example.h5", "foo")
created = h5createGroup("example.h5", "baa")
created = h5createGroup("example.h5", "foo/foobaa")
h51s("example.h5")
created = h5createGroup("example.h5", "foo")
created = h5createGroup("example.h5", "baa")
created = h5createGroup("example.h5", "foo/foobaa")
h51s("example.h5")
ibrary(httr)
> oauth_endpoints("github")
> myapp ", secret = "")
> github_token  req  stop_for_status(req)
> content(req)
> BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic"))
library(httr)
oauth_endpoints("github")
myapp ", secret = "")
github_token  req  stop_for_status(req)
content(req)
BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic"))
library(httr)
oauth_endpoints("github")
myapp ", secret = "")
github_token  req  stop_for_status(req)
content(req)
BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic"))
library(httr)
require(httpuv)
require(jsonlite)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("quiz2", "ddb0d599de51ccd02f4b", secret="6af1109f6ecf442d292425087d49bb13d9bbe9c8")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(swirl)
swirl()
bye()
install_form_swirl("R Programming")
install_from_swirl("R Programming")
library(swirl)
swirl()
1:20
pi:10
15:1
`:`
:
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num <- 6
num_vect >=6
my_char <- c("my", "name", "is")
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- paste(my_char, "MyeongHei Moon")
my_name <- c(my_char, "MyeongHei Moon")
my_name
paste(my_name)
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "")
paste(LETTERS, 1:4, sep = "-")
bye()
library(swirl)
swirl()
set.seed(13435)
X <- data.frame("var1"=sample(1:5), "var2"=sample(6:10), "var3"=sample(11:15))
X <- X[sample(1:5),]; X$var2[c(1,3)]=NA
X
?set.seed
X[(X$var1 <= 3 & X$var3 > 11),]
X[(X$var1 <= 3 | X$var3 > 15),]
X[which(X$var2 > 8),]
sort(X$var1)
X[order(X$var1),]
X[order(X$var1, X$var3),]
library(swirl)
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
bye()
## Download the file and put the file in the data folder.
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileUrl,destfile="./data/Dataset.zip",method="curl")
## Unzip the file.
unzip(zipfile="./data/Dataset.zip",exdir="./data")
## unzipped files are in the folder UCI HAR Dataset. Get the list of the files.
path_rf <- file.path("./data" , "UCI HAR Dataset")
files<-list.files(path_rf, recursive=TRUE)
files
## Read data from the files into the variables
dataActivityTest  <- read.table(file.path(path_rf, "test" , "Y_test.txt" ),header = FALSE)
dataActivityTrain <- read.table(file.path(path_rf, "train", "Y_train.txt"),header = FALSE)
dataSubjectTrain <- read.table(file.path(path_rf, "train", "subject_train.txt"),header = FALSE)
dataSubjectTest  <- read.table(file.path(path_rf, "test" , "subject_test.txt"),header = FALSE)
dataFeaturesTest  <- read.table(file.path(path_rf, "test" , "X_test.txt" ),header = FALSE)
dataFeaturesTrain <- read.table(file.path(path_rf, "train", "X_train.txt"),header = FALSE)
## Look at the properties of the above varibles.
str(dataActivityTest)
str(dataActivityTrain)
str(dataSubjectTrain)
str(dataSubjectTest)
str(dataFeaturesTest)
str(dataFeaturesTrain)
## Mergees the training and the test sets to create one data set.
dataSubject <- rbind(dataSubjectTrain, dataSubjectTest)
dataActivity<- rbind(dataActivityTrain, dataActivityTest)
dataFeatures<- rbind(dataFeaturesTrain, dataFeaturesTest)
names(dataSubject)<-c("subject")
names(dataActivity)<- c("activity")
dataFeaturesNames <- read.table(file.path(path_rf, "features.txt"),head=FALSE)
names(dataFeatures)<- dataFeaturesNames$V2
dataCombine <- cbind(dataSubject, dataActivity)
Data <- cbind(dataFeatures, dataCombine)
## Extracts only the measurements on the mean and standard deviation for each measurement
subdataFeaturesNames<-dataFeaturesNames$V2[grep("mean\\(\\)|std\\(\\)", dataFeaturesNames$V2)]
selectedNames<-c(as.character(subdataFeaturesNames), "subject", "activity" )
Data<-subset(Data,select=selectedNames)
str(Data)
library(swirl)
swirl()
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
?rep
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
?sample
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0 by 0
0/0
Inf - Inf
bye()
filePath <- getwd()
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
download.file(fileUrl,destfile="./data/Dataset.zip")
## Unzip DataSet to the data directory
unzip(zipfile="./data/Dataset.zip",exdir="./data")
## Read the dataset
data <- read.table(file.path(filePath, "data", "household_power_consumption.txt"),
sep =";",header=T, na.strings = "?")
## Subset the dataset
newdata <- data[data$Date %in% c("1/2/2007","2/2/2007"), ]
## Change a data format
newtime <- strptime(paste(newdata$Date,newdata$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
totaldat <- cbind(newtime,newdata)
plot(totaldat$newtime, totaldat$Global_active_power, type = "l",
ylab = "Global Active Power (kilowatts)", xlab="")  ##, xaxt = "n")
getwd()
# Author : Arda OZTURK
# Date   : 01/05/2016
# Assignment 1
# Plot 1
# download an unzip 'household_power_consumption.txt' file
# Under your root dir in a folder called 'data'
dataFile <- "./data/household_power_consumption.txt"
# Read file
# First row includes haeders so set HEADER=TRUE
data <- read.table(dataFile, header=TRUE, sep=";", stringsAsFactors=FALSE, dec=".")
# Sub set requested data only
plotData <- subset(data, (Date == "1/2/2007" | Date == "2/2/2007"))
# alterlative way to subset
# plotData <- data[data$Date %in% c("1/2/2007","2/2/2007") ,]
# You cab check the date before moving on
# str(plotData)
# Convert related data into numerci form
# **hist function will require numeric data
globalActivePower <- as.numeric(plotData$Global_active_power)
# Create Histogram on Screen Device and see the results
hist(globalActivePower, col="red", main="Global Active Power", xlab="Global Active Power (kilowatts)")
library(swirl)
swirl()
x
x[1:10]
x[(is.na(x))]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
c(x)
c(3, 5, 7)
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect2)
identical()
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
bye()
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
bye()
setwd("~/Desktop/RepData_PeerAssessment1")
## R preparations & Loading in the necessary packages
library(knitr)
opts_chunk$set(echo = TRUE)
library(dplyr)
library(lubridate)
library(ggplot2)
install.packages(ggplot2)
install.packages('ggplot2')
install.packages("ggplot2")
## 1. Lodding and preprocessing the data
activity <- read.csv("activity.csv")
activity$day <- weekdays(as.Date(activity$date))
activity$DateTime<- as.POSIXct(activity$date, format="%Y-%m-%d")
##pulling data without nas
clean <- activity[!is.na(activity$steps),]
steps <- data %>%
filter(!is.na(steps)) %>%
group_by(date) %>%
summarize(steps = sum(steps)) %>%
print
sumTable <- aggregate(activity$steps ~ activity$date, FUN=sum, )
colnames(sumTable)<- c("Date", "Steps")
ggplot(sunTable$Steps, aes(x = Steps))
geom_histogram(fill = "firebrick", binwidth = 1000)
labs(title = "Histogram of Steps per day", x = "Steps per day", y = "Frequency")
ggplot(sumTable$Steps, aes(x = Steps))
geom_histogram(fill = "firebrick", binwidth = 1000)
labs(title = "Histogram of Steps per day", x = "Steps per day", y = "Frequency")
ggplot(Steps, aes(x = Steps))
geom_histogram(fill = "firebrick", binwidth = 1000)
labs(title = "Histogram of Steps per day", x = "Steps per day", y = "Frequency")
ggplot(steps, aes(x = steps))
geom_histogram(fill = "firebrick", binwidth = 1000)
labs(title = "Histogram of Steps per day", x = "Steps per day", y = "Frequency")
ggplot(Steps, aes(x = Steps))
geom_histogram(fill = "firebrick", binwidth = 1000)
labs(title = "Histogram of Steps per day", x = "Steps per day", y = "Frequency")
?aes
ggplot(sumTable$Steps, aes(x = Steps))
geom_histogram(fill = "firebrick", binwidth = 1000)
labs(title = "Histogram of Steps per day", x = "Steps per day", y = "Frequency")
ggplot(activity$Steps, aes(x = Steps))
geom_histogram(fill = "firebrick", binwidth = 1000)
labs(title = "Histogram of Steps per day", x = "Steps per day", y = "Frequency")
ggplot(sumTable$Steps, aes(x = sumtable$Steps))
geom_histogram(fill = "firebrick", binwidth = 1000)
labs(title = "Histogram of Steps per day", x = "Steps per day", y = "Frequency")
ggplot(sumTable$Steps, aes(x = sumTable$Steps))
geom_histogram(fill = "firebrick", binwidth = 1000)
labs(title = "Histogram of Steps per day", x = "Steps per day", y = "Frequency")
ggplot(Steps, aes(x = Steps))
geom_histogram(fill = "firebrick", binwidth = 1000)
labs(title = "Histogram of Steps per day", x = "Steps per day", y = "Frequency")
?aes
activity <- read.csv("activity.csv")
activity$day <- weekdays(as.Date(activity$date))
activity$DateTime<- as.POSIXct(activity$date, format="%Y-%m-%d")
##pulling data without nas
clean <- activity[!is.na(activity$steps),]
## 2. What is mean total number of steps taken per day?
## 2-1. Calculate the total number of steps taken per day.
sumTable <- aggregate(activity$steps ~ activity$date, FUN=sum, )
colnames(sumTable)<- c("Date", "Steps")
ggplot(Steps, aes(x = Steps))
geom_histogram(fill = "firebrick", binwidth = 1000)
labs(title = "Histogram of Steps per day", x = "Steps per day", y = "Frequency")
ggplot(Steps, aes(Steps))
geom_histogram(fill = "firebrick", binwidth = 1000)
labs(title = "Histogram of Steps per day", x = "Steps per day", y = "Frequency")
ggplot(Steps, aes(x = Steps)) +
geom_histogram(fill = "firebrick", binwidth = 1000) +
labs(title = "Histogram of Steps per day", x = "Steps per day", y = "Frequency")
g <- ggplot(Steps, aes(x = Steps)) +
geom_histogram(fill = "firebrick", binwidth = 1000) +
labs(title = "Histogram of Steps per day", x = "Steps per day", y = "Frequency")
print(g)
ggplot(sumTable$Steps, aes(sumTable$Steps)) +
geom_histogram(fill = "firebrick", binwidth = 1000) +
labs(title = "Histogram of Steps per day", x = "Steps per day", y = "Frequency")
sumTable <- aggregate(activity$steps ~ activity$date, FUN=sum, )
colnames(sumTable)<- c("Date", "Steps")
hist(sumTable$Steps, breaks=5, xlab="Steps", main = "Total Steps per Day")
ggplot(data = sumTable$Steps, aes(sumTable$Steps))+
geom_histogram(fill = "firebrick", binwidth = 1000) +
labs(title = "Histogram of Steps per day", x = "Steps per day", y = "Frequency")
activity <- read.csv("activity.csv", header = TRUE, sep = ',', colClasses = c("numeric", "character", "integer"))
activity$day <- weekdays(as.Date(activity$date))
activity$DateTime<- as.POSIXct(activity$date, format="%Y-%m-%d")
##pulling data without nas
clean <- activity[!is.na(activity$steps),]
## 2. What is mean total number of steps taken per day?
## 2-1. Calculate the total number of steps taken per day.
sumTable <- aggregate(activity$steps ~ activity$date, FUN=sum, )
colnames(sumTable)<- c("Date", "Steps")
ggplot(data = sumTable$Steps, aes(sumTable$Steps))+
geom_histogram(fill = "firebrick", binwidth = 1000) +
labs(title = "Histogram of Steps per day", x = "Steps per day", y = "Frequency")
sumTable
ggplot(data = sumTable, aes(sumTable))+
geom_histogram(fill = "firebrick", binwidth = 1000) +
labs(title = "Histogram of Steps per day", x = "Steps per day", y = "Frequency")
ggplot(data = sumTable, aes(x = sumTable))+
geom_histogram(fill = "firebrick", binwidth = 1000) +
labs(title = "Histogram of Steps per day", x = "Steps per day", y = "Frequency")
ggplot(data = Steps, aes(Steps))+
geom_histogram(fill = "firebrick", binwidth = 1000) +
labs(title = "Histogram of Steps per day", x = "Steps per day", y = "Frequency")
ggplot(sumTable$Steps, aes(sumTable$Steps))+
geom_histogram(fill = "firebrick", binwidth = 1000) +
labs(title = "Histogram of Steps per day", x = "Steps per day", y = "Frequency")
ggplot(sumTable$Steps)+
geom_histogram(fill = "firebrick", binwidth = 1000) +
labs(title = "Histogram of Steps per day", x = "Steps per day", y = "Frequency")
ggplot(sumTable, aes(Steps))+
geom_histogram(fill = "firebrick", binwidth = 1000) +
labs(title = "Histogram of Steps per day", x = "Steps per day", y = "Frequency")
as.integer(mean(sumTable$Steps))
as.integer(median(sumTable$Steps))
